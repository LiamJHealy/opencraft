generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Word {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  emoji       String?
  category    String?
  tier        Int?
  isStarter   Boolean             @default(false)
  isGoal      Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  asLeft      RecipeEdge[]        @relation("ingredient_left")
  asRight     RecipeEdge[]        @relation("ingredient_right")
  asResult    RecipeEdge[]        @relation("result_word")
  targetRuns  DailyTargetHistory[]

  @@index([category])
}

enum RecipeSource {
  CANON
  OLLAMA
  MOCK
  MANUAL
  OPENAI
}

model RecipeEdge {
  id        Int          @id @default(autoincrement())
  leftId    Int
  rightId   Int
  resultId  Int
  category  String?
  source    RecipeSource @default(MANUAL)
  isDefault Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  left      Word         @relation("ingredient_left", fields: [leftId], references: [id], onDelete: Cascade)
  right     Word         @relation("ingredient_right", fields: [rightId], references: [id], onDelete: Cascade)
  result    Word         @relation("result_word", fields: [resultId], references: [id], onDelete: Cascade)

  @@index([leftId, rightId])
  @@index([resultId])
  @@index([category])
  @@unique([leftId, rightId, resultId])
}

model DailyTargetHistory {
  id            Int      @id @default(autoincrement())
  seed          String
  targetId      Int
  selectedOn    DateTime @default(now())
  maxDepth      Int?
  starterWordIds Json

  target        Word     @relation(fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([seed])
  @@index([selectedOn])
  @@index([targetId])
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  alias         String   @unique
  passwordHash  String
  passwordEnc   String
  passwordIv    String
  passwordTag   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions      Session[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}
